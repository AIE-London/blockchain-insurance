<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="API Test Project" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__P(webservice.host,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(webservice.port,3000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Main Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1472638904000</longProp>
        <longProp name="ThreadGroup.end_time">1472638904000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${TestCase}!=&quot;&quot;</stringProp>
        </WhileController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Tests" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">CSV/main-test.csv</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="variableNames"></stringProp>
          </CSVDataSet>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF PUT" enabled="true">
            <stringProp name="IfController.condition">&quot;${Method}&quot; == &quot;PUT&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TestCase} - ${__eval(${URL})}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestJSON}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__eval(${URL})}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF GET" enabled="true">
            <stringProp name="IfController.condition">&quot;${Method}&quot; == &quot;GET&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TestCase} - ${__eval(${URL})}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__eval(${URL})}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DELETE" enabled="true">
            <stringProp name="IfController.condition">&quot;${Method}&quot; == &quot;DELETE&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TestCase} - ${__eval(${URL})}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__eval(${URL})}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF POST" enabled="true">
            <stringProp name="IfController.condition">&quot;${Method}&quot; == &quot;POST&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${TestCase} - ${__eval(${URL})}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestJSON}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__eval(${URL})}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1770356231">${StatusCode}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">

;(function(){function n(n,t){return n.push.apply(n,t),n}function t(n){return function(t){return null==t?Z:t[n]}}function r(n,t,r,e,u){return u(n,function(n,u,o){r=e?(e=false,n):t(r,n,u,o)}),r}function e(n,t){return d(t,function(t){return n[t]})}function u(n){return n instanceof o?n:new o(n)}function o(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t}function i(n,t,r,e){return n===Z||J(n,an[r])&amp;&amp;!ln.call(e,r)?t:n}function c(n){return V(n)?vn(n):{}}function f(n,t,r){if(typeof n!=&quot;function&quot;)throw new TypeError(&quot;Expected a function&quot;);
return setTimeout(function(){n.apply(Z,r)},t)}function a(n,t){var r=true;return jn(n,function(n,e,u){return r=!!t(n,e,u)}),r}function l(n,t,r){for(var e=-1,u=n.length;++e&lt;u;){var o=n[e],i=t(o);if(null!=i&amp;&amp;(c===Z?i===i:r(i,c)))var c=i,f=o}return f}function p(n,t){var r=[];return jn(n,function(n,e,u){t(n,e,u)&amp;&amp;r.push(n)}),r}function s(t,r,e,u,o){var i=-1,c=t.length;for(e||(e=D),o||(o=[]);++i&lt;c;){var f=t[i];0&lt;r&amp;&amp;e(f)?1&lt;r?s(f,r-1,e,u,o):n(o,f):u||(o[o.length]=f)}return o}function h(n,t){return n&amp;&amp;dn(n,t,Rn);
}function v(n,t){return p(t,function(t){return U(n[t])})}function b(n,t){return n&gt;t}function y(n,t,r,e,u){return n===t||(null==n||null==t||!V(n)&amp;&amp;!H(t)?n!==n&amp;&amp;t!==t:g(n,t,y,r,e,u))}function g(n,t,r,e,u,o){var i=wn(n),c=wn(t),f=&quot;[object Array]&quot;,a=&quot;[object Array]&quot;;i||(f=sn.call(n),f=&quot;[object Arguments]&quot;==f?&quot;[object Object]&quot;:f),c||(a=sn.call(t),a=&quot;[object Arguments]&quot;==a?&quot;[object Object]&quot;:a);var l=&quot;[object Object]&quot;==f&amp;&amp;true,c=&quot;[object Object]&quot;==a&amp;&amp;true,a=f==a;o||(o=[]);var p=On(o,function(t){return t[0]==n;
}),s=On(o,function(n){return n[0]==t});if(p&amp;&amp;s)return p[1]==t;if(o.push([n,t]),o.push([t,n]),a&amp;&amp;!l){if(i)r=B(n,t,r,e,u,o);else n:{switch(f){case&quot;[object Boolean]&quot;:case&quot;[object Date]&quot;:case&quot;[object Number]&quot;:r=J(+n,+t);break n;case&quot;[object Error]&quot;:r=n.name==t.name&amp;&amp;n.message==t.message;break n;case&quot;[object RegExp]&quot;:case&quot;[object String]&quot;:r=n==t+&quot;&quot;;break n}r=false}return o.pop(),r}return 2&amp;u||(i=l&amp;&amp;ln.call(n,&quot;__wrapped__&quot;),f=c&amp;&amp;ln.call(t,&quot;__wrapped__&quot;),!i&amp;&amp;!f)?!!a&amp;&amp;(r=R(n,t,r,e,u,o),o.pop(),r):(i=i?n.value():n,
f=f?t.value():t,r=r(i,f,e,u,o),o.pop(),r)}function _(n){return typeof n==&quot;function&quot;?n:null==n?X:(typeof n==&quot;object&quot;?m:t)(n)}function j(n,t){return n&lt;t}function d(n,t){var r=-1,e=P(n)?Array(n.length):[];return jn(n,function(n,u,o){e[++r]=t(n,u,o)}),e}function m(n){var t=gn(n);return function(r){var e=t.length;if(null==r)return!e;for(r=Object(r);e--;){var u=t[e];if(!(u in r&amp;&amp;y(n[u],r[u],Z,3)))return false}return true}}function O(n,t){return n=Object(n),C(t,function(t,r){return r in n&amp;&amp;(t[r]=n[r]),t},{})}function x(n){
var t;return t=_n(t===Z?n.length-1:t,0),function(){for(var r=arguments,e=-1,u=_n(r.length-t,0),o=Array(u);++e&lt;u;)o[e]=r[t+e];for(e=-1,u=Array(t+1);++e&lt;t;)u[e]=r[e];return u[t]=o,n.apply(this,u)}}function A(n,t,r){var e=-1,u=n.length;for(0&gt;t&amp;&amp;(t=-t&gt;u?0:u+t),r=r&gt;u?u:r,0&gt;r&amp;&amp;(r+=u),u=t&gt;r?0:r-t&gt;&gt;&gt;0,t&gt;&gt;&gt;=0,r=Array(u);++e&lt;u;)r[e]=n[e+t];return r}function E(n){return A(n,0,n.length)}function w(n,t){var r;return jn(n,function(n,e,u){return r=t(n,e,u),!r}),!!r}function k(t,r){return C(r,function(t,r){return r.func.apply(r.thisArg,n([t],r.args));
},t)}function N(n,t,r,e){r||(r={});for(var u=-1,o=t.length;++u&lt;o;){var i=t[u],c=e?e(r[i],n[i],i,r,n):Z,f=r,a=i,i=c===Z?n[i]:c,c=f[a];ln.call(f,a)&amp;&amp;J(c,i)&amp;&amp;(i!==Z||a in f)||(f[a]=i)}return r}function S(n){return x(function(t,r){var e=-1,u=r.length,o=1&lt;u?r[u-1]:Z,o=3&lt;n.length&amp;&amp;typeof o==&quot;function&quot;?(u--,o):Z;for(t=Object(t);++e&lt;u;){var i=r[e];i&amp;&amp;n(t,i,e,o)}return t})}function T(n){return function(){var t=arguments,r=c(n.prototype),t=n.apply(r,t);return V(t)?t:r}}function F(n,t,r){function e(){for(var o=-1,i=arguments.length,c=-1,f=r.length,a=Array(f+i),l=this&amp;&amp;this!==un&amp;&amp;this instanceof e?u:n;++c&lt;f;)a[c]=r[c];
for(;i--;)a[c++]=arguments[++o];return l.apply(t,a)}if(typeof n!=&quot;function&quot;)throw new TypeError(&quot;Expected a function&quot;);var u=T(n);return e}function B(n,t,r,e,u,o){var i=n.length,c=t.length;if(i!=c&amp;&amp;!(2&amp;u&amp;&amp;c&gt;i))return false;for(var c=-1,f=true,a=1&amp;u?[]:Z;++c&lt;i;){var l=n[c],p=t[c];if(void 0!==Z){f=false;break}if(a){if(!w(t,function(n,t){if(!$(a,t)&amp;&amp;(l===n||r(l,n,e,u,o)))return a.push(t)})){f=false;break}}else if(l!==p&amp;&amp;!r(l,p,e,u,o)){f=false;break}}return f}function R(n,t,r,e,u,o){var i=2&amp;u,c=Rn(n),f=c.length,a=Rn(t).length;
if(f!=a&amp;&amp;!i)return false;for(var l=f;l--;){var p=c[l];if(!(i?p in t:ln.call(t,p)))return false}for(a=true;++l&lt;f;){var p=c[l],s=n[p],h=t[p];if(void 0!==Z||s!==h&amp;&amp;!r(s,h,e,u,o)){a=false;break}i||(i=&quot;constructor&quot;==p)}return a&amp;&amp;!i&amp;&amp;(r=n.constructor,e=t.constructor,r!=e&amp;&amp;&quot;constructor&quot;in n&amp;&amp;&quot;constructor&quot;in t&amp;&amp;!(typeof r==&quot;function&quot;&amp;&amp;r instanceof r&amp;&amp;typeof e==&quot;function&quot;&amp;&amp;e instanceof e)&amp;&amp;(a=false)),a}function D(n){return wn(n)||M(n)}function I(n){var t=[];if(null!=n)for(var r in Object(n))t.push(r);return t}function q(n){
return n&amp;&amp;n.length?n[0]:Z}function $(n,t,r){var e=n?n.length:0;r=typeof r==&quot;number&quot;?0&gt;r?_n(e+r,0):r:0,r=(r||0)-1;for(var u=t===t;++r&lt;e;){var o=n[r];if(u?o===t:o!==o)return r}return-1}function z(n,t){return jn(n,_(t))}function C(n,t,e){return r(n,_(t),e,3&gt;arguments.length,jn)}function G(n,t){var r;if(typeof t!=&quot;function&quot;)throw new TypeError(&quot;Expected a function&quot;);return n=kn(n),function(){return 0&lt;--n&amp;&amp;(r=t.apply(this,arguments)),1&gt;=n&amp;&amp;(t=Z),r}}function J(n,t){return n===t||n!==n&amp;&amp;t!==t}function M(n){
return H(n)&amp;&amp;P(n)&amp;&amp;ln.call(n,&quot;callee&quot;)&amp;&amp;(!bn.call(n,&quot;callee&quot;)||&quot;[object Arguments]&quot;==sn.call(n))}function P(n){var t;return(t=null!=n)&amp;&amp;(t=n.length,t=typeof t==&quot;number&quot;&amp;&amp;-1&lt;t&amp;&amp;0==t%1&amp;&amp;9007199254740991&gt;=t),t&amp;&amp;!U(n)}function U(n){return n=V(n)?sn.call(n):&quot;&quot;,&quot;[object Function]&quot;==n||&quot;[object GeneratorFunction]&quot;==n}function V(n){var t=typeof n;return!!n&amp;&amp;(&quot;object&quot;==t||&quot;function&quot;==t)}function H(n){return!!n&amp;&amp;typeof n==&quot;object&quot;}function K(n){return typeof n==&quot;number&quot;||H(n)&amp;&amp;&quot;[object Number]&quot;==sn.call(n)}
function L(n){return typeof n==&quot;string&quot;||!wn(n)&amp;&amp;H(n)&amp;&amp;&quot;[object String]&quot;==sn.call(n)}function Q(n){return typeof n==&quot;string&quot;?n:null==n?&quot;&quot;:n+&quot;&quot;}function W(n){return n?e(n,Rn(n)):[]}function X(n){return n}function Y(t,r,e){var u=Rn(r),o=v(r,u);null!=e||V(r)&amp;&amp;(o.length||!u.length)||(e=r,r=t,t=this,o=v(r,Rn(r)));var i=!(V(e)&amp;&amp;&quot;chain&quot;in e&amp;&amp;!e.chain),c=U(t);return jn(o,function(e){var u=r[e];t[e]=u,c&amp;&amp;(t.prototype[e]=function(){var r=this.__chain__;if(i||r){var e=t(this.__wrapped__);return(e.__actions__=E(this.__actions__)).push({
func:u,args:arguments,thisArg:t}),e.__chain__=r,e}return u.apply(t,n([this.value()],arguments))})}),t}var Z,nn=1/0,tn=/[&amp;&lt;&gt;&quot;&apos;`]/g,rn=RegExp(tn.source),en=typeof self==&quot;object&quot;&amp;&amp;self&amp;&amp;self.Object===Object&amp;&amp;self,un=typeof global==&quot;object&quot;&amp;&amp;global&amp;&amp;global.Object===Object&amp;&amp;global||en||Function(&quot;return this&quot;)(),on=(en=typeof exports==&quot;object&quot;&amp;&amp;exports&amp;&amp;!exports.nodeType&amp;&amp;exports)&amp;&amp;typeof module==&quot;object&quot;&amp;&amp;module&amp;&amp;!module.nodeType&amp;&amp;module,cn=function(n){return function(t){return null==n?Z:n[t]}}({&quot;&amp;&quot;:&quot;&amp;amp;&quot;,
&quot;&lt;&quot;:&quot;&amp;lt;&quot;,&quot;&gt;&quot;:&quot;&amp;gt;&quot;,&apos;&quot;&apos;:&quot;&amp;quot;&quot;,&quot;&apos;&quot;:&quot;&amp;#39;&quot;,&quot;`&quot;:&quot;&amp;#96;&quot;}),fn=Array.prototype,an=Object.prototype,ln=an.hasOwnProperty,pn=0,sn=an.toString,hn=un._,vn=Object.create,bn=an.propertyIsEnumerable,yn=un.isFinite,gn=function(n,t){return function(r){return n(t(r))}}(Object.keys,Object),_n=Math.max;o.prototype=c(u.prototype),o.prototype.constructor=o;var jn=function(n,t){return function(r,e){if(null==r)return r;if(!P(r))return n(r,e);for(var u=r.length,o=t?u:-1,i=Object(r);(t?o--:++o&lt;u)&amp;&amp;false!==e(i[o],o,i););
return r}}(h),dn=function(n){return function(t,r,e){var u=-1,o=Object(t);e=e(t);for(var i=e.length;i--;){var c=e[n?i:++u];if(false===r(o[c],c,o))break}return t}}(),mn=String,On=function(n){return function(t,r,e){var u=Object(t);if(!P(t)){var o=_(r);t=Rn(t),r=function(n){return o(u[n],n,u)}}return r=n(t,r,e),-1&lt;r?u[o?t[r]:r]:Z}}(function(n,t,r){var e=n?n.length:0;if(!e)return-1;r=null==r?0:kn(r),0&gt;r&amp;&amp;(r=_n(e+r,0));n:{for(t=_(t),e=n.length,r+=-1;++r&lt;e;)if(t(n[r],r,n)){n=r;break n}n=-1}return n}),xn=x(function(n,t,r){
return F(n,t,r)}),An=x(function(n,t){return f(n,1,t)}),En=x(function(n,t,r){return f(n,Nn(t)||0,r)}),wn=Array.isArray,kn=Number,Nn=Number,Sn=S(function(n,t){N(t,gn(t),n)}),Tn=S(function(n,t){N(t,I(t),n)}),Fn=S(function(n,t,r,e){N(t,Dn(t),n,e)}),Bn=x(function(n){return n.push(Z,i),Fn.apply(Z,n)}),Rn=gn,Dn=I,In=x(function(n,t){return null==n?{}:O(n,d(s(t,1),mn))});u.assignIn=Tn,u.before=G,u.bind=xn,u.chain=function(n){return n=u(n),n.__chain__=true,n},u.compact=function(n){return p(n,Boolean)},u.concat=function(){
for(var t=arguments.length,r=Array(t?t-1:0),e=arguments[0],u=t;u--;)r[u-1]=arguments[u];return t?n(wn(e)?E(e):[e],s(r,1)):[]},u.create=function(n,t){var r=c(n);return t?Sn(r,t):r},u.defaults=Bn,u.defer=An,u.delay=En,u.filter=function(n,t){return p(n,_(t))},u.flatten=function(n){return n&amp;&amp;n.length?s(n,1):[]},u.flattenDeep=function(n){return n&amp;&amp;n.length?s(n,nn):[]},u.iteratee=_,u.keys=Rn,u.map=function(n,t){return d(n,_(t))},u.matches=function(n){return m(Sn({},n))},u.mixin=Y,u.negate=function(n){if(typeof n!=&quot;function&quot;)throw new TypeError(&quot;Expected a function&quot;);
return function(){return!n.apply(this,arguments)}},u.once=function(n){return G(2,n)},u.pick=In,u.slice=function(n,t,r){var e=n?n.length:0;return r=r===Z?e:+r,e?A(n,null==t?0:+t,r):[]},u.sortBy=function(n,r){var e=0;return r=_(r),d(d(n,function(n,t,u){return{value:n,index:e++,criteria:r(n,t,u)}}).sort(function(n,t){var r;n:{r=n.criteria;var e=t.criteria;if(r!==e){var u=r!==Z,o=null===r,i=r===r,c=e!==Z,f=null===e,a=e===e;if(!f&amp;&amp;r&gt;e||o&amp;&amp;c&amp;&amp;a||!u&amp;&amp;a||!i){r=1;break n}if(!o&amp;&amp;r&lt;e||f&amp;&amp;u&amp;&amp;i||!c&amp;&amp;i||!a){r=-1;
break n}}r=0}return r||n.index-t.index}),t(&quot;value&quot;))},u.tap=function(n,t){return t(n),n},u.thru=function(n,t){return t(n)},u.toArray=function(n){return P(n)?n.length?E(n):[]:W(n)},u.values=W,u.extend=Tn,Y(u,u),u.clone=function(n){return V(n)?wn(n)?E(n):N(n,gn(n)):n},u.escape=function(n){return(n=Q(n))&amp;&amp;rn.test(n)?n.replace(tn,cn):n},u.every=function(n,t,r){return t=r?Z:t,a(n,_(t))},u.find=On,u.forEach=z,u.has=function(n,t){return null!=n&amp;&amp;ln.call(n,t)},u.head=q,u.identity=X,u.indexOf=$,u.isArguments=M,
u.isArray=wn,u.isBoolean=function(n){return true===n||false===n||H(n)&amp;&amp;&quot;[object Boolean]&quot;==sn.call(n)},u.isDate=function(n){return H(n)&amp;&amp;&quot;[object Date]&quot;==sn.call(n)},u.isEmpty=function(n){return P(n)&amp;&amp;(wn(n)||L(n)||U(n.splice)||M(n))?!n.length:!gn(n).length},u.isEqual=function(n,t){return y(n,t)},u.isFinite=function(n){return typeof n==&quot;number&quot;&amp;&amp;yn(n)},u.isFunction=U,u.isNaN=function(n){return K(n)&amp;&amp;n!=+n},u.isNull=function(n){return null===n},u.isNumber=K,u.isObject=V,u.isRegExp=function(n){return V(n)&amp;&amp;&quot;[object RegExp]&quot;==sn.call(n);
},u.isString=L,u.isUndefined=function(n){return n===Z},u.last=function(n){var t=n?n.length:0;return t?n[t-1]:Z},u.max=function(n){return n&amp;&amp;n.length?l(n,X,b):Z},u.min=function(n){return n&amp;&amp;n.length?l(n,X,j):Z},u.noConflict=function(){return un._===this&amp;&amp;(un._=hn),this},u.noop=function(){},u.reduce=C,u.result=function(n,t,r){return t=null==n?Z:n[t],t===Z&amp;&amp;(t=r),U(t)?t.call(n):t},u.size=function(n){return null==n?0:(n=P(n)?n:gn(n),n.length)},u.some=function(n,t,r){return t=r?Z:t,w(n,_(t))},u.uniqueId=function(n){
var t=++pn;return Q(n)+t},u.each=z,u.first=q,Y(u,function(){var n={};return h(u,function(t,r){ln.call(u.prototype,r)||(n[r]=t)}),n}(),{chain:false}),u.VERSION=&quot;4.15.0&quot;,jn(&quot;pop join replace reverse split push shift sort splice unshift&quot;.split(&quot; &quot;),function(n){var t=(/^(?:replace|split)$/.test(n)?String.prototype:fn)[n],r=/^(?:push|sort|unshift)$/.test(n)?&quot;tap&quot;:&quot;thru&quot;,e=/^(?:pop|join|replace|shift)$/.test(n);u.prototype[n]=function(){var n=arguments;if(e&amp;&amp;!this.__chain__){var u=this.value();return t.apply(wn(u)?u:[],n);
}return this[r](function(r){return t.apply(wn(r)?r:[],n)})}}),u.prototype.toJSON=u.prototype.valueOf=u.prototype.value=function(){return k(this.__wrapped__,this.__actions__)},typeof define==&quot;function&quot;&amp;&amp;typeof define.amd==&quot;object&quot;&amp;&amp;define.amd?(un._=u, define(function(){return u})):on?((on.exports=u)._=u,en._=u):un._=u}).call(this);

var respString = prev.getResponseDataAsString();
var length = respString.length;
if(prev.getContentType() == &quot;application/json&quot;){
	var response = JSON.parse(respString);
	
	var expected = JSON.parse(vars.get(&quot;ExpectedJSON&quot;));
	if(expected._rev &amp;&amp; response._rev){
		response._rev = expected._rev;
	}

	if(expected.createdDate &amp;&amp; response.createdDate){
		response.createdDate = expected.createdDate;
	}
	if(expected._id &amp;&amp; response._id){
		if(expected._id === &quot;IGNORE&quot;){
			vars.put(&quot;genID&quot;, response._id);
			response._id = expected._id;			
		}
	}
	
	if(expected.id &amp;&amp; response.id){
		if(expected.id === &quot;IGNORE&quot;){
			vars.put(&quot;genID&quot;, response.id);
			response.id = expected.id;	
		}
		else if(expected.id === &quot;GENERATED&quot;){
			expected.id = &quot;${genID}&quot;;
			expected.message = expected.message.replace(&quot;{genID}&quot;, &quot;${genID}&quot;);
		}
	}
	log.info(JSON.stringify(response));
	log.info(JSON.stringify(expected));
	var equality = _.isEqual(response, expected);
	
	if(!equality){
		prev.setSuccessful(false);
		prev.setResponseMessage(&quot;JSON doesnt match expected output.&quot;);
	}
	else{
		prev.setSuccessful(true);
	}
}


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
